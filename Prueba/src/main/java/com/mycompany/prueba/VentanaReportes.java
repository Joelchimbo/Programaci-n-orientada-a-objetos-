/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.prueba;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.Document;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author chimn
 */
public class VentanaReportes extends javax.swing.JFrame {
      private double dineroGenerado = 0.0;
      

    /**
     * Creates new form VentanaReportes
     */
    public VentanaReportes() {
        initComponents();
        // Agregar ActionListener al botón "EXPORTAR TXT"
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setText("EXPORTAR TXT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, -1, -1));

        jButton1.setBackground(new java.awt.Color(153, 255, 0));
        jButton1.setFont(new java.awt.Font("Gill Sans Ultra Bold", 0, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\chimn\\OneDrive\\Documentos\\NetBeansProjects\\Prueba\\src\\main\\resources\\imgs\\arrow (1).png")); // NOI18N
        jButton1.setText("Regresar");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
        // Crear un nuevo archivo TXT para el reporte de ventas
        FileWriter writer = new FileWriter("reporte_ventas.txt");

        // Escribir encabezado del reporte
        writer.write("Reporte de Ventas\n\n");

        // Consultar la base de datos para obtener la información sobre los precios de cada producto
        double precioCocacola = consultarPrecioProducto("cocacola");
        double precioPepsi = consultarPrecioProducto("pepsi");
        double precioChips = consultarPrecioProducto("chips");
        double precioAgua = consultarPrecioProducto("agua");

        // Consultar la base de datos para obtener la información sobre las ventas de cada producto
        Map<String, Integer> ventasPorProducto = consultarVentasPorProducto();

        double dineroGenerado = 0.0;

        // Escribir información de las ventas en el archivo TXT
        for (Map.Entry<String, Integer> entry : ventasPorProducto.entrySet()) {
            String producto = entry.getKey();
            int cantidadVendida = entry.getValue();
            double precioProducto = 0.0;
            switch (producto) {
                case "cocacola":
                    precioProducto = precioCocacola;
                    break;
                case "pepsi":
                    precioProducto = precioPepsi;
                    break;
                case "chips":
                    precioProducto = precioChips;
                    break;
                case "agua":
                    precioProducto = precioAgua;
                    break;
            }
            writer.write("Producto: " + producto.toUpperCase() + "\n");
            writer.write("Precio: $" + precioProducto + "\n");
            writer.write("Cantidad vendida: " + cantidadVendida + "\n");
            writer.write("Dinero generado: $" + (precioProducto * cantidadVendida) + "\n\n");
            dineroGenerado += precioProducto * cantidadVendida;
        }

        // Escribir el total de dinero generado en el archivo TXT
        writer.write("Total dinero generado: $" + dineroGenerado);

        // Cerrar el archivo
        writer.close();

        JOptionPane.showMessageDialog(null, "El reporte de ventas se ha exportado correctamente a TXT.");
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Error al exportar el reporte de ventas a TXT: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed
    // Método para consultar el precio de un producto específico en la base de datos
    private double consultarPrecioProducto(String producto) {
    try (MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017")) {
        MongoDatabase database = mongoClient.getDatabase("inventario");
        MongoCollection<Document> collection = database.getCollection("productos");
        Document queryResult = collection.find(Filters.eq("nombre", producto)).first();
        if (queryResult != null) {
            double precioBase = queryResult.getDouble("precio"); // Obtener el precio base del producto
            int cantidad = queryResult.getInteger("stock"); // Obtener la cantidad de stock disponible
            // Calcular el precio del producto basado en el stock disponible
            double precio = precioBase * calcularFactorPrecio(cantidad);
            return precio;
        } else {
            // Si no se encuentra el producto en la base de datos, retornar un precio por defecto
            return 0.0;
        }
    }
}
private double calcularFactorPrecio(int cantidad) {
    // Aquí puedes definir la lógica para calcular el factor basado en la cantidad de stock
    // Por ejemplo, podrías hacer que el precio aumente si el stock es bajo o disminuya si el stock es alto.
    // En este ejemplo simple, simplemente retornamos 1, lo que significa que el precio base no se ve afectado por el stock.
    return 1.0;
}
    
    private Map<String, Integer> consultarVentasPorProducto() {
        try (MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017")) {
        MongoDatabase database = mongoClient.getDatabase("inventario");
        MongoCollection<Document> collection = database.getCollection("productos");
        Map<String, Integer> ventasPorProducto = new HashMap<>();
        String[] productos = {"cocacola", "pepsi", "chips", "agua"};
        for (String producto : productos) {
            Document queryResult = collection.find(Filters.eq("nombre", producto)).first();
            if (queryResult != null) {
                int cantidadVendida = 10 - queryResult.getInteger("stock"); // Ventas = 10 - Stock actual
                ventasPorProducto.put(producto, cantidadVendida);
            } else {
                ventasPorProducto.put(producto, 0); // Si no se encuentra el producto, se asume que no ha vendido nada
            }
        }
        return ventasPorProducto;
    }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Crear una instancia de la ventana de Administrador
        Administrador administrador = new Administrador();

        // Hacer visible la ventana de Administrador
        administrador.setVisible(true);

        // Ocultar la ventana actual de AgregarProducto
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
// Método para consultar las ventas de cada producto en la base de datos

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaReportes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
